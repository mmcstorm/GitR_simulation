b
#### Modellen
# model without specified cross-loadings
model_withoutC <- function(fact=1, nitems=6) {
TXT <- ""
for(j in 1:fact) {
if(j==1){J <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + "))}
if(j>1){J <- rbind (J, K <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + ")))}
TXT <- J
}
TXT
}
# model with specified cross-loadings
model_withC <- function(fact=1, nitems=6) {
TXT <- ""
for(j in 1:fact) {
if(j==1){J <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + "))}
if(j==2|j==4|j==6|j==8){ J <- paste0("F", j, " =~ ",
paste0("X", ((j-1)*nitems)-1 + 1:(nitems+1), collapse=" + "))}
if(j==3|j==5|j==7){J <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + "))}
TXT <- rbind(TXT,J)
}
TXT
}
model_withC(4,24)
b
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
x.mis
factors = 8
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
x.mis
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
y.mis
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
b[x.mis[1], y.mis[1]] <- .2
b[x.mis[2], y.mis[2]] <- .2
b[x.mis[3], y.mis[3]] <- .2
b[x.mis[4], y.mis[4]] <- .2
b
for (i in 1:4) {
b[x.mis[i], y.mis[i]] <- .2
return(b)
}
b
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
b
for (i in 1:4) {
b[x.mis[i], y.mis[i]] <- .2
return(b)
}
b
x.mis[i]
y.mis[i]
length(x.mis)
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
return(b)
}
b
x.mis[i]
y.mis[i]
for (i in length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
return(b)
}
b
x.mis[i]
y.mis[i]
length(x.mis)
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
b[x.mis, y.mis]
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
b[x.mis, y.mis]
b[x.mis[1], y.mis[1]]
b[x.mis[1], y.mis[1]] <- .2
b[x.mis[1], y.mis[1]]
b[x.mis[2], y.mis[2]] <- .2
b[x.mis[2], y.mis[2]]
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
b
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
return(b)
}
b
1:length(x.mis)
x.mis[i]
y.mis[i]
for (i in 1:4) {
b[x.mis[i], y.mis[i]] <- .2
}
b
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
b
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
}
b
factors = 4
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
}
b
#### Data generatie voor continue data
MyDataGeneration <- function(factors, nobs, nvarp = 6) {
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# determine coordinates of cross-loadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
# add cross-loadings
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
}
#compute error values (theta matrix)
ev <- diag(1 - diag(b %*% s %*% t(b)))
#compute sigma (variance-covariance matrix)
SIGMA <- b %*% s %*% t(b) + ev  #1's on the diagonal
#simulate data from a Multivariate Normal Distribution
x <- data.frame(MASS:::mvrnorm(n = nobs, mu = int2, Sigma = SIGMA))
#x is an nobs by nvars matrix with item scores
return(x)
}
# Data genereren met 12 items (200 obs)
data_12 <- MyDataGeneration(2,nobs = 1000)
# Data genereren met 24 items (200 obs)
data_24 <-  MyDataGeneration(4,nobs = 1000)
# Data genereren met 36 items (200 obs)
data_36 <-  MyDataGeneration(6,nobs = 1000)
# Data genereren met 48 items (200 obs)
data_48 <-  MyDataGeneration(8,nobs = 1000)
#### Modellen
# model without specified cross-loadings
model_withoutC <- function(fact=1, nitems=6) {
TXT <- ""
for(j in 1:fact) {
if(j==1){J <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + "))}
if(j>1){J <- rbind (J, K <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + ")))}
TXT <- J
}
TXT
}
# model with specified cross-loadings
model_withC <- function(fact=1, nitems=6) {
TXT <- ""
for(j in 1:fact) {
if(j==1){J <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + "))}
if(j==2|j==4|j==6|j==8){ J <- paste0("F", j, " =~ ",
paste0("X", ((j-1)*nitems)-1 + 1:(nitems+1), collapse=" + "))}
if(j==3|j==5|j==7){J <- paste0("F", j, " =~ ",
paste0("X", (j-1)*nitems + 1:nitems, collapse=" + "))}
TXT <- rbind(TXT,J)
}
TXT
}
################ fit als cross-ladingen zijn meegenomen in het model########
# fit voor 12 items
fit_12 <- cfa( model <- model_withC(2),
data=data_12, std.lv=TRUE,
estimator="ML")
library(lavaan)
################ fit als cross-ladingen zijn meegenomen in het model########
# fit voor 12 items
fit_12 <- cfa( model <- model_withC(2),
data=data_12, std.lv=TRUE,
estimator="ML")
summary(fit_12)
# fit voor 24 items
fit_24 <- cfa( model <- model_withC(4),
data=data_24, std.lv=TRUE,
estimator="ML")
summary(fit_24)
# fit voor 36 items
fit_36 <- cfa( model <- model_withC(6),
data=data_36, std.lv=TRUE,
estimator="ML")
summary(fit_36)
# fit voor 48 items
fit_48 <- cfa( model <- model_withC(8),
data=data_48, std.lv=TRUE,
estimator="ML")
summary(fit_48)
################ fit als cross-ladingen NIET zijn meegenomen in het model########
# fit voor 12 items
fit_12 <- cfa( model <- model_withoutC(2),
data=data_12, std.lv=TRUE,
estimator="ML")
summary(fit_12)
# fit voor 24 items
fit_24 <- cfa( model <- model_withoutC(4),
data=data_24, std.lv=TRUE,
estimator="ML")
summary(fit_24)
# fit voor 36 items
fit_36 <- cfa( model <- model_withoutC(6),
data=data_36, std.lv=TRUE,
estimator="ML")
summary(fit_36)
# fit voor 48 items
fit_48 <- cfa( model <- model_withoutC(8),
data=data_48, std.lv=TRUE,
estimator="ML")
summary(fit_48)
######################## ORDINAL DATA ##################
#### Data generatie voor ordinale data
MyDataGeneration <- function(factors, nobs, ncat, nvarp = 6) {
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# add crossloadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
b[x.mis, y.mis] <- .2
#compute error values (theta matrix)
ev <- diag(1 - diag(b %*% s %*% t(b)))
#compute sigma (variance-covariance matrix)
SIGMA <- b %*% s %*% t(b) + ev  #1's on the diagonal
#simulate data from a Multivariate Normal Distribution
x <- data.frame(MASS:::mvrnorm(n = nobs, mu = int2, Sigma = SIGMA))
# for 2 answer categories (1 threshold -> 0)
if (ncat==2) {item.cutpoints <-
matrix(c(rep(0,nvar)), ncol=nvar, byrow=TRUE)}
# for 4 answer categories (3 thresholds -> -1.2, 0, 1.2)
if (ncat==4) {item.cutpoints <-
matrix(c(rep(-1.20,nvar),rep(0,nvar),
rep(1.20,nvar)), ncol=nvar, byrow=TRUE)}
#item cutpoints (add boundaries)
item.cutpoints <- rbind(rep(-Inf, ncol(item.cutpoints)),
item.cutpoints, rep(Inf, ncol(item.cutpoints)))
for(i in 1:ncol(item.cutpoints)){
x[,i] = cut(x[,i], br=item.cutpoints[,i],
labels=FALSE, include.lowest=TRUE)
}
#x is an nobs by nvars matrix with item scores
return(x)
}
######################## ORDINAL DATA ##################
#### Data generatie voor ordinale data
MyDataGeneration <- function(factors, nobs, ncat, nvarp = 6) {
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# determine coordinates of cross-loadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
# add cross-loadings
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
}
#compute error values (theta matrix)
ev <- diag(1 - diag(b %*% s %*% t(b)))
#compute sigma (variance-covariance matrix)
SIGMA <- b %*% s %*% t(b) + ev  #1's on the diagonal
#simulate data from a Multivariate Normal Distribution
x <- data.frame(MASS:::mvrnorm(n = nobs, mu = int2, Sigma = SIGMA))
# for 2 answer categories (1 threshold -> 0)
if (ncat==2) {item.cutpoints <-
matrix(c(rep(0,nvar)), ncol=nvar, byrow=TRUE)}
# for 4 answer categories (3 thresholds -> -1.2, 0, 1.2)
if (ncat==4) {item.cutpoints <-
matrix(c(rep(-1.20,nvar),rep(0,nvar),
rep(1.20,nvar)), ncol=nvar, byrow=TRUE)}
#item cutpoints (add boundaries)
item.cutpoints <- rbind(rep(-Inf, ncol(item.cutpoints)),
item.cutpoints, rep(Inf, ncol(item.cutpoints)))
for(i in 1:ncol(item.cutpoints)){
x[,i] = cut(x[,i], br=item.cutpoints[,i],
labels=FALSE, include.lowest=TRUE)
}
#x is an nobs by nvars matrix with item scores
return(x)
}
# Data genereren met 12 items (200 obs)
data_12 <- MyDataGeneration(2, ncat = 2, nobs = 1000)
# Data genereren met 24 items (200 obs)
data_24 <-  MyDataGeneration(4, ncat = 2, nobs = 1000)
# Data genereren met 36 items (200 obs)
data_36 <-  MyDataGeneration(6, ncat = 2, nobs = 1000)
# Data genereren met 48 items (200 obs)
data_48 <-  MyDataGeneration(8, ncat = 2, nobs = 1000)
# fit voor 12 items
fit_12 <- cfa( model <- model_withC(2),
data=data_12, std.lv=TRUE,
ordered = c(colnames(data_12)),
estimator="PML")
summary(fit_12)
# fit voor 24 items (Let op: duurt lang!)
fit_24 <- cfa( model <- model_withC(4),
data=data_24, std.lv=TRUE,
ordered = c(colnames(data_24)),
estimator="PML")
summary(fit_24)
# fit voor 24 items (Let op: duurt lang!)
fit_24 <- cfa( model <- model_withoutC(4),
data=data_24, std.lv=TRUE,
ordered = c(colnames(data_24)),
estimator="PML")
# prepared functions
MyDataGeneration <- function(factors, nobs, nvarp = 6) {
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# determine coordinates of cross-loadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
# add cross-loadings
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
}
#compute error values (theta matrix)
ev <- diag(1 - diag(b %*% s %*% t(b)))
#compute sigma (variance-covariance matrix)
SIGMA <- b %*% s %*% t(b) + ev  #1's on the diagonal
#simulate data from a Multivariate Normal Distribution
x <- data.frame(MASS:::mvrnorm(n = nobs, mu = int2, Sigma = SIGMA))
item.cutpoints <-
matrix(c(rep(-1.20,nvar),rep(0,nvar),
rep(1.20,nvar)), ncol=nvar, byrow=TRUE)
#item cutpoints (add boundaries)
item.cutpoints <- rbind(rep(-Inf, ncol(item.cutpoints)),
item.cutpoints, rep(Inf, ncol(item.cutpoints)))
#create indexes for ordinal
.indexes <- function(fact){
reps <- fact / 2
base.vec <- rep(seq(7,12,1), times = reps)
add.vec <- rep(1:reps - 1, each = 6) * 12
return(base.vec + add.vec)
}
for(i in .indexes(factors)){
x[,i] = cut(x[,i], br=item.cutpoints[,i],
labels=FALSE, include.lowest=TRUE)
}
#x is an nobs by nvars matrix with item scores
return(x)
}
# test function
MyDataGeneration(factors = 4, nobs = 200)
summary(fit_24)
# Data genereren met 36 items (200 obs)
data_36 <-  MyDataGeneration(6, ncat = 2, nobs = 500)
######################## ORDINAL DATA ##################
#### Data generatie voor ordinale data
MyDataGeneration <- function(factors, nobs, ncat, nvarp = 6) {
# model specifications
nvar <- factors*nvarp
BM <- matrix(c(.8,.8,.7,.7,.6,.6),nrow=1) #factor loadings
r <- 0.3 # correlation between latent variables
int <- c(0,0,0,0,0,0) # intercept
s <- matrix(r, factors, factors)
diag(s) <- 1
# intercepts of the items
int2 <- rep(int,factors)
# b is the loadingsmatrix > transposed matrix version
b <- t(kronecker(diag(factors), BM)) # kronecker computes product of two arrays
# determine coordinates of cross-loadings (misspecifications)
x.mis <- sapply(1:(factors/2), function(x) return(6 + 12*(x-1)))
y.mis <- sapply(1:(factors/2), function(x) return(2 + 2*(x-1)))
# add cross-loadings
for (i in 1:length(x.mis)) {
b[x.mis[i], y.mis[i]] <- .2
}
#compute error values (theta matrix)
ev <- diag(1 - diag(b %*% s %*% t(b)))
#compute sigma (variance-covariance matrix)
SIGMA <- b %*% s %*% t(b) + ev  #1's on the diagonal
#simulate data from a Multivariate Normal Distribution
x <- data.frame(MASS:::mvrnorm(n = nobs, mu = int2, Sigma = SIGMA))
# for 2 answer categories (1 threshold -> 0)
if (ncat==2) {item.cutpoints <-
matrix(c(rep(0,nvar)), ncol=nvar, byrow=TRUE)}
# for 4 answer categories (3 thresholds -> -1.2, 0, 1.2)
if (ncat==4) {item.cutpoints <-
matrix(c(rep(-1.20,nvar),rep(0,nvar),
rep(1.20,nvar)), ncol=nvar, byrow=TRUE)}
#item cutpoints (add boundaries)
item.cutpoints <- rbind(rep(-Inf, ncol(item.cutpoints)),
item.cutpoints, rep(Inf, ncol(item.cutpoints)))
for(i in 1:ncol(item.cutpoints)){
x[,i] = cut(x[,i], br=item.cutpoints[,i],
labels=FALSE, include.lowest=TRUE)
}
#x is an nobs by nvars matrix with item scores
return(x)
}
# Data genereren met 36 items (200 obs)
data_36 <-  MyDataGeneration(6, ncat = 2, nobs = 500)
# fit voor 36 items (Let op: duurt lang!)
fit_36 <- cfa( model <- model_withoutC(6),
data=data_36, std.lv=TRUE,
ordered = c(colnames(data_36)),
estimator="PML")
summary(fit_36)
# MainSimulationScriptSLURM (following the code of the manual)
args <- commandArgs(TRUE) #SLURM command
args <- as.numeric(args)
RowOfDesign <- args[1]
Replication <- args[2]
############################# Simulation Design  #############################
factors <- c(2,4,6,8) 					            #number of latent variables
nobs <- c(200,400,800)                      #sample size
ncat <- c(2,4)                              #number of categories
Design <- expand.grid(factors = factors, nobs = nobs, ncat = ncat)
#load packages
library(lavaan)
library(usethis)
# load prepared functions
source("ORDINAL_all_functions_script.R")
setwd("~/Documents/Master Statistical Science /Thesis/Simulation preperation PML/GitR_simulation_script1/GitR_simulation_script/Ordinal Data scripts")
# load prepared functions
source("ORDINAL_all_functions_script.R")
